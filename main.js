// Generated by Haxe 4.3.1
(function ($global) { "use strict";
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.main = function() {
	var input = window.document.createElement("input");
	input.type = "file";
	input.multiple = false;
	window.document.body.appendChild(input);
	input.addEventListener("change",function() {
		window.document.body.removeChild(input);
		var file = input.files[0];
		var reader = new FileReader();
		reader.readAsText(file);
		reader.addEventListener("load",function() {
			var csv = reader.result;
			var rows = csv.split("\n");
			if(StringTools.trim(rows[rows.length - 1]) == "") {
				rows.pop();
			}
			var entries = [];
			var _g = 0;
			while(_g < rows.length) {
				var row = rows[_g];
				++_g;
				if(row != rows[0]) {
					entries.push(row.split(";"));
				}
			}
			var _g = 0;
			while(_g < entries.length) {
				var row = entries[_g];
				++_g;
				var div = window.document.createElement("div");
				window.document.body.appendChild(div);
				var p = window.document.createElement("p");
				p.innerHTML = "<b>" + row[0] + " " + row[1] + "</b>";
				div.appendChild(p);
				var _g1 = 0;
				var _g2 = row.length;
				while(_g1 < _g2) {
					var entry = _g1++;
					if(entry != 0 && entry != 1 && entry < 8) {
						var p1 = window.document.createElement("p");
						p1.innerText = row[entry].toString();
						div.appendChild(p1);
					}
				}
			}
		});
	});
};
var StringTools = function() { };
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
Main.main();
})({});
